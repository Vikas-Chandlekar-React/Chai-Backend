3. Add initial files for backend

4. Add following : 
    - Create public folder and temp folder in public 
    - Install dev dependency nodemon 
    - Setup project files and folders
    - Install dev dependency prettier
        - .prettierignore, .prettierrc file 

5. Add Following : 
    - Connect to MONGODB (2 WAYS)

6. Add Following : 
    - Install cors and cookie-parser middleware.
    - Add multiple middlewares for handle data from req.body and from url 
    - Add production standard code in util folder : 
        - asyncHandler 
        - ApiError 
        - ApiResponse

7. Add Following : 
    - Install bcrypt, jsonwebtoken, mongoose-aggregate-paginate-v2.
    - Create User, Video Schema.
    - Create Custom method in User Schema 
        - isPasswordCorrect
        - generateAccessToken
        - generateRefreshToken
    - Use Pre-Hook in User Schema to save encrypted password.

8. Add Following : 
    - Install cloudinary, multer
    - How to upload file in cloudinary using multer.
        - We create utility for this in utils/cloudinary.js
    - Add multer middleware

9. Add Following : 
    - Create first route and test it using postman.
        - Create method in controller 
        - Assign controller method with specific route
        - Register route in app.js

10. Add Following : 
    - Complete register route with testing using postman.
    - Changes in utils/cloudinary.js
        - add folder name in cloudinary
    - Export both ApiError and ApiResponse at utils folder 
    - Changes in multer.middleware.js
        - Change filename when we stored on local server.
    - add multer middleware in /register in user.routes.js 
        - upload multiple file (Here, 2 different files)

11. Add Following : 
    - Create login, logout route. (Check user.routes.js and user.controller.js)
    - Create verifyJWT in auth.middleware.js

12. Add Following : 
    - Few bug fixes for login and logout api working.
    - Testing login and logout api routes.
    - Add and Test refresh-token route in user.routes.js and user.controller.js

13. Add Following : 
    - Remove unnecessary code (not working) from logoutUser in user.controller.js

14. Add Following : 
    - Add subscription schema in subscription.model.js

15. Add Following : 
    - Add following routes and test it using postman : 
        - change-password (POST)
        - current-user (GET)
        - update-account (PATCH)
        - avatar (PATCH)
        - cover-image (PATCH)

16. Add Following : 
    - Add following routes and test it using postman : 
        - /subscribeButtonClick/:channelId (POST)
        - /c/:username (GET)